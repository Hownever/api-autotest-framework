- config:
    # 测试用例名称
    name: 服务外部依赖测试
    regionId: cn-north-1

    variables:
        jdsm_ui_host: ${ENV(ENV_JDMESH_WEB_BASE_URL)}
        product_host: ${ENV(ENV_PRODUCT_PAGE_BASE_URL)}
        c_ark_host: ${ENV(ENV_ARK_WEB_BASE_URL)}
        expected_status_code: 503
        product: ${ENV(ENV_TEST_PRODUCT)}
        env: ${ENV(ENV_TEST_ENV)}
        serviceentrys: []
        sleeptime: 0
#        serviceentrys: [{"protocol":"HTTP","host":"www.baidu.com","port":80},{"protocol":"TCP","host":"127.0.0.1","port":9080}]
#        test_protocol: HTTP
#        test_datas: {"method": "GET", "url": "www.baidu.com"}
        test_protocol: TCP
#        test_datas: {"host": "127.0.0.1", "port": 999, "data": "send data"}
        test_datas: {"host": "git.jd.com", "port": 80, "data": "GET / HTTP/1.1\nHost: git.jd.com\nAccept-Language: fr\n \n\n"}
#        test_datas: {"host": "developer.mozilla.org", "port": 80, "data":"GET / HTTP/1.1\nHost: developer.mozilla.org\nAccept-Language: fr\n \n\n"}
        findstr_in_config_dump: findstr in config_dump json str
        is_service_entry_settings_match_config_dump: 0
        tcp_return_content: ""

        is_test_failed: 0
        http_return_code: 0
        tcp_return_code: 0
    output:
        - jsonResponse
        - productpageRes

#    # setup_hooks: 在整个用例开始执行前触发 hook 函数，主要用于准备工作。
#    setup_hooks:
#        - a: ${hook_print("user： user")}
#
#    # teardown_hooks: 在整个用例结束执行后触发 hook 函数，主要用于测试后的清理工作。
#    teardown_hooks:
#        - b: ${hook_print("teardown_hooks for config")}
#

- test:
    name: 获取云翼cookies（从mock server）
    api: api/mock/mock-data-get.yml

    variables:
        mock_host: ${ENV(ENV_MOCK_SERVER_BASE_URL)}
        # mock存储的id，使用时的id
        mock_id: ${get_host_from_url($c_ark_host)}
        # 是否删除get的value
        remove_after_get: disable
        cookie: {}
    extract:
        - sso: "sso.jd.com=(\\w+\\.\\w+); "
    teardown_hooks:
        - cookie: {'ENV_COOKIES': '_ga=GA1.2.1393266954.1552618748; 3AB9D23F7A4B3C9B=N56LRR2BO5SZE5CC45ZOBB2KSDATYNJX4LX3CNGKBXC32FFGVFAUZOX2JS5CFMDTB3WES7TJYJD22HNLXDUL4LZQ3I; jd.erp.lang=zh_CN; __jdv=145146863|direct|-|none|-|1564985477902; jdcloud_sitelang=cn; apigatewayareaCode=cn-north-1; apigatewayareaName=%25E5%258D%258E%25E5%258C%2597-%25E5%258C%2597%25E4%25BA%25AC; jdcloud_sitelang_server=cn; Hm_lvt_38f625421267eb5065e400d79fc42c74=1565867188,1565867204; Hm_lpvt_38f625421267eb5065e400d79fc42c74=1565867204; ipv6_iaas=0; jdcloud-api-testconsole_label=1; jdcloud-api-testversion=v2; __jda=250358228.1554091325970812602438.1554091326.1557283719.1559796648.14; __jdc=250358228; thor=266D4182C9765ABA472EE445C9393A60509F8D7E0447FB1E10B4431FC853342A36021CD1838975E5C96DF7FBA6DA9BCA33CAD7D649DAE20DBB9DC7843D638994DB457581E8E0A69ED700E7840A853D1630E60746433053A42FC704AD989084E239118420B63B460DF45B83DAFE11B28D19783ACC092CFF07273CC880262D2A35095CFCB01C2216FAF51A5506AA530B14; pin=jcloud_00; unick=jcloud_00; jcloud_00console_label=1; jcloud_00version=v2; currPage=images; erp1.jd.com=7369BCEC44355A9112C5F56E0FB7A8BC722166B565DB51CA47690EF175BA8F8A1E7A73BDE4F4CD6B82D07449FE6EBC875DE06573D83089441B3DA9FA76143C80E2E8DB226416A5E298F459E2DB140089; sso.jd.com=$sso '}
        # 更新cookie值到环境变量中，方便后续脚本使用
        - update_env_var: ${set_os_environ($cookie)}
    validate:
        - eq: ["status_code", 200]

#- test:
#    # 测试步骤名称
#    name:  查询网格相关设置项，确认服务外部依赖为空
#    api: api/jdsm-basicconfig/jdsm-web-describebasicconfig.yml
#
#    variables:
#        host: $jdsm_ui_host
#        expected_status_code: 200
#        product: $product
#        env: $env
#    extract:
#        - jsonResponse: content
#        - serviceentry: content.result.basicConfig.serviceEntries
#    validate:
#        - eq: ["status_code", 200]

- test:
    # 测试步骤名称
    name:  配置网格外部依赖为： $serviceentrys
    # skipIf: ${validate($serviceentry, 0, len_eq)}
    api: api/jdsm-basicconfig/jdsm-web-update-basicconfig.yml

    variables:
        host: $jdsm_ui_host
        product: $product
        env: $env
        serviceEntries: $serviceentrys
    extract:
        - jsonResponse: content
    validate:
        - eq: ["status_code", 200]

- test:
    # 测试步骤名称
    name:  等待 $sleeptime s - 测试协议：$test_protocol - 检查API返回状态码是否为:$expected_status_code 其中之一（当是TCP协议时，跳过此步）
    skipUnless: ${validate($test_protocol, HTTP, eq)}
    api: api/productpage/productpage-api-remotecall.yml

    variables:
        host: $product_host
        protocol: $test_protocol
        datas: $test_datas

    setup_hooks:
        - ${sleep_N_secs($sleeptime)}

    extract:
        - productpageRes: content
        - http_return_code: status_code
    validate:
        - contained_by: ["status_code", $expected_status_code]


- test:
    # 测试步骤名称
    name:  等待 $sleeptime s - 测试协议：$test_protocol - 检查API返回状态码是否为:$expected_status_code，并且接口返回内容包含：HTTP/1.1 （当是HTTP协议时，跳过此步）
    skipUnless: ${validate($test_protocol, TCP, eq)}
    api: api/productpage/productpage-api-remotecall.yml

    variables:
        host: $product_host
        protocol: $test_protocol
        datas: $test_datas

    setup_hooks:
        - ${sleep_N_secs($sleeptime)}

    extract:
        - productpageRes: content
        - tcp_return_code: content.code
        - tcp_return_datas: content.datas
    validate:
        - contained_by: [$tcp_return_code, "$expected_status_code"]
        - string_contains: [ "${tcp_return_datas}", "${tcp_return_content}" ]

- test:
    # 测试步骤名称
    name:  如果测试失败，则获取productpage中的config_dumps数据，并检查是否正确（配置entry为空值时，不包含$findstr_in_config_dump，配置为$findstr_in_config_dump 时，则需要包含），否则跳过此步
    skipIf: ${is_should_skip_config_dumps_test($test_protocol, $http_return_code, $tcp_return_code, $expected_status_code)}
    api: api/productpage/productpage-api-remotecall.yml

    variables:
        host: $product_host
        protocol: HTTP
        datas: {"method": "GET", "url": "http://127.0.0.1:15000/config_dump", "allow_redirects": False}

    extract:
        - configs: content

    teardown_hooks:
        - is_service_entry_settings_match_config_dump: ${config_dump_match_the_service_entry_settings($configs, $serviceentrys, $findstr_in_config_dump)}

    validate:
        - eq: ["status_code", 200]
        - eq: ["$is_service_entry_settings_match_config_dump", 1]