name: mock server set value
description: |
    设置mock server值

variables:
    mock_host: ${ENV(ENV_MOCK_SERVER_BASE_URL)}
    # 值必须为enable，否则mock server不会存储
    setter: enable
    # 如果已经存在对应mock_id的记录，是否覆盖， enable表示覆盖，其他值不覆盖
    force_covered: enable

#    # datas: mock server return datas:
#    "{ *id: your_mock_data_id,"
#    " *code: your_mocker_return_code,"
#    " *body: your_mock_return_datas,"
#    " headers: your_mock_return_headers,"
#    " type: your_mock_data_type},"
#    " type like application/json for"
#    " json return(default if not set), * is must option"
    mock_header:  {
            "Content-Type": application/json,
            "token": mytoken
        }

    # mock存储的id，使用时的id
    mock_id: you_mock_data_id
    # mock返回结果时的http status code
    mock_code: your_mocker_return_code
    # mock返回结果的内容
    mock_data: your_mock_return_datas
    # mock值的http协议中的数据类型
    mock_type: application/json
    # 返回结果延时时间
    mock_return_delay_seconds: 0

    expected_status_code: 200

request:
    url: $mock_host/mockserver
    method: POST
    headers:
        # X-Jdcloud-Test-Configs-Mock-Setter
        X-Jdcloud-Test-Configs-Mock-Setter: $setter
        X-Jdcloud-Test-Configs-Mock-Setter-Force-Covered: $force_covered
    json:
        headers: $mock_header
        id: $mock_id
        code: $mock_code
        body: $mock_data
        type: $mock_type
        delaysecs: $mock_return_delay_seconds

setup_hooks:
    # - ${hook_update_jdcloud_request($request, $AK, $SK, $product, $apiVersion, $openapi_yaml, $regionId)}
    - ${hook_print("teardown_hooks for config")
teardown_hooks:
    - ${hook_print("teardown_hooks for config")