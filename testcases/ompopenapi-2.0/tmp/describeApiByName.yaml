- config:
    # 测试用例名称
    name: 查询某个业务线下提供的API列表
    # config中request中的参数是对当前yaml文件中的所有test共用的
    request:
         base_url: ${ENV(ENV_BASE_URL)}
         regionId: ${ENV(ENV_DEFAULT_REGIONID)}

    variables:
        # *定义API对应的业务线名称，必须与yaml对应，必须项
        - product: ${ENV(ENV_PRODUCT)}
        # *定义API的版本，必须项
        - apiVersion: ${ENV(ENV_VERSION)}
        # 用户pin
        - userpin: ${ENV(ENV_USER_PIN)}
        # 内部调用时，部分接口需要传的erp
        - usererp: ${ENV(ENV_USER_ERP)}
        # accessKey， 可选， 还可以从env环境变量中获取
        - AK: ${ENV(ENV_AK)}
        # SecretKey， 可选， 还可以从env环境变量中获取
        - SK: ${ENV(ENV_SK)}
        # 接口定义的swagger项目地址
        - openapi_yaml: ${ENV(ENV_OPENAPI_SWAGGER_FILE_PATH)}


    # setup_hooks: 在整个用例开始执行前触发 hook 函数，主要用于准备工作。
    setup_hooks:
        - ${hook_print("setup_hooks for config")}

    # teardown_hooks: 在整个用例结束执行后触发 hook 函数，主要用于测试后的清理工作。
    teardown_hooks:
        - ${hook_print("teardown_hooks for config")}

- test:
    # 测试步骤名称
    name:  有效性-用户-有权限调用-返回对应vm业务线api列表

    # request中的key不区分大小写
    request:
        operationId:  describeApiByName
        name: vm
        method:


        headers:
            x-jdcloud-pin: $userpin
            x-jdcloud-erp: wangbibo1
        json:
            pageNumber: 1
            pageSize: 1

    # 在开始API调用前，执行的hook操作：
    setup_hooks:
        # **必须项目，测试JD API接口时，必须填写的hook
        - request: ${hook_update_jdcloud_request($config, $request, $AK, $SK, $product, $apiVersion, $openapi_yaml)}

    extract:
        - scode: status_code
        - requestId: content.requestId
        - expath: content.result.dataList.0.path

    validate:
        - eq: ["status_code", 200]
        - len_gt: [content.result.dataList, 10]
        - type_match: [content.result.dataList.0.apiId, int]
        - len_gt: [content.result.dataList.0.name, 0]
        - regex_match: [content.result.dataList.0.version, "v\\d+"]
        - len_gt: [content.result.dataList.0.interfaceName, 0]
        - contained_by: [content.result.dataList.0.method, ["GET", "POST", "DELETE", "PATCH"]]
        # - not_equals: [content.result.dataList.0.path, ""]
        - type_match: [content.result.dataList.0.apiRegex, str]
        - type_match: [content.result.dataList.0.internal, int]
        - type_match: [content.result.dataList.0.status, int]
        - type_match: [content.result.dataList.0.createTime, int]
        - type_match: [content.result.dataList.0.lastModifyTime, int]
        - len_gt: [content.result.dataList.0.lastModifier, 0]

- test:
    # 测试步骤名称
    name:  有效性-用户-无权限调用-返回[]

    # request中的key不区分大小写
    request:
        operationId:  describeApiByName
        name: vm
        method:


        headers:
            x-jdcloud-pin: $userpin
            x-jdcloud-erp: likui34
        json:
            pageNumber: 1
            pageSize: 1

    # 在开始API调用前，执行的hook操作：
    setup_hooks:
        # **必须项目，测试JD API接口时，必须填写的hook
        - request: ${hook_update_jdcloud_request($config, $request, $AK, $SK, $product, $apiVersion, $openapi_yaml)}

    extract:
        - scode: status_code
        - requestId: content.requestId

    validate:
        - eq: ["status_code", 200]
        - len_eq: [content.result.dataList, 0]

- test:
    # 测试步骤名称
    name:  有效性-业务线-不存在业务线-返回[]

    # request中的key不区分大小写
    request:
        operationId:  describeApiByName
        name: vmsssss
        method:


        headers:
            x-jdcloud-pin: $userpin
            x-jdcloud-erp: wangbibo1

    # 在开始API调用前，执行的hook操作：
    setup_hooks:
        # **必须项目，测试JD API接口时，必须填写的hook
        - request: ${hook_update_jdcloud_request($config, $request, $AK, $SK, $product, $apiVersion, $openapi_yaml)}

    extract:
        - scode: status_code
        - requestId: content.requestId

    validate:
        - eq: ["status_code", 200]
        - len_eq: [content.result.dataList, 0]